{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/Turingstuff/PetHealthProject/src/Components/APIComponent.js\",\n  _s = $RefreshSig$();\nimport './APIComponent.css';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\n\n/// pass in input from outside this component, from formcomponent probably\n// use that to determine the parameters for the search/lookup\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction APIComponent({\n  responses,\n  setResponses\n}) {\n  _s();\n  const [responseVals, setResponseVal] = useState('');\n  function addResponse(newResponse) {\n    setResponseVal([...responseVals, newResponse]);\n    setResponses([responses, setResponses]);\n  }\n  let input = \"pain\";\n  // useEffect(() => {\n  //     const getPetHealth = async () => {\n  //         if (input) {\n\n  //             try {\n  //                 const url = 'https://api.fda.gov/animalandveterinary/event.json?search=' + input + '&limit=1';\n  //                 const response = await fetch(url);\n  //                 if (!response.ok) {\n  //                     console.log(\"not okay line 31\")\n  //                     const err = new Error(response.statusText)\n  //                     err.statusCode = response.status\n  //                     throw err\n  //                 } else {\n  //                     const data = await response.json();\n  //                     console.log(response, \" response line 27\");\n  //                     console.log(data, \" data line 28\");\n  //                     addResponse(data);\n  //                     return data;\n  //                 }\n  //             }\n  //             catch (err) {\n  //                 console.error(err)\n  //             }\n  //         }\n  //     };\n  //     void getPetHealth();\n\n  // }, []);\n\n  console.log(responses);\n  return responses.forEach(response => {\n    response.key = response.meta;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: response.meta\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  });\n}\n_s(APIComponent, \"0CFGVAgXquqWBKanV4z8wcL329s=\");\n_c = APIComponent;\nexport default APIComponent;\nvar _c;\n$RefreshReg$(_c, \"APIComponent\");","map":{"version":3,"names":["useEffect","useState","React","jsxDEV","_jsxDEV","APIComponent","responses","setResponses","_s","responseVals","setResponseVal","addResponse","newResponse","input","console","log","forEach","response","key","meta","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryan/Desktop/Turingstuff/PetHealthProject/src/Components/APIComponent.js"],"sourcesContent":["import './APIComponent.css';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\n\n/// pass in input from outside this component, from formcomponent probably\n// use that to determine the parameters for the search/lookup\n\nfunction APIComponent({ responses, setResponses }) {\n    const [responseVals, setResponseVal] = useState('');\n    function addResponse(newResponse) {\n        setResponseVal([...responseVals, newResponse])\n        setResponses([responses, setResponses]);\n    }\n\n    let input = \"pain\"\n    // useEffect(() => {\n    //     const getPetHealth = async () => {\n    //         if (input) {\n\n    //             try {\n    //                 const url = 'https://api.fda.gov/animalandveterinary/event.json?search=' + input + '&limit=1';\n    //                 const response = await fetch(url);\n    //                 if (!response.ok) {\n    //                     console.log(\"not okay line 31\")\n    //                     const err = new Error(response.statusText)\n    //                     err.statusCode = response.status\n    //                     throw err\n    //                 } else {\n    //                     const data = await response.json();\n    //                     console.log(response, \" response line 27\");\n    //                     console.log(data, \" data line 28\");\n    //                     addResponse(data);\n    //                     return data;\n    //                 }\n    //             }\n    //             catch (err) {\n    //                 console.error(err)\n    //             }\n    //         }\n    //     };\n    //     void getPetHealth();\n\n    // }, []);\n\n    console.log(responses)\n    return (responses.forEach(((response) => {\n        response.key = response.meta;\n        return (\n            <div>\n                <div>\n                    {response.meta}\n                </div>\n                <br />\n            </div>\n        )\n    })))\n}\n\n\nexport default APIComponent;"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,YAAYA,CAAC;EAAEC,SAAS;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC/C,MAAM,CAACC,YAAY,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACnD,SAASU,WAAWA,CAACC,WAAW,EAAE;IAC9BF,cAAc,CAAC,CAAC,GAAGD,YAAY,EAAEG,WAAW,CAAC,CAAC;IAC9CL,YAAY,CAAC,CAACD,SAAS,EAAEC,YAAY,CAAC,CAAC;EAC3C;EAEA,IAAIM,KAAK,GAAG,MAAM;EAClB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEAC,OAAO,CAACC,GAAG,CAACT,SAAS,CAAC;EACtB,OAAQA,SAAS,CAACU,OAAO,CAAGC,QAAQ,IAAK;IACrCA,QAAQ,CAACC,GAAG,GAAGD,QAAQ,CAACE,IAAI;IAC5B,oBACIf,OAAA;MAAAgB,QAAA,gBACIhB,OAAA;QAAAgB,QAAA,EACKH,QAAQ,CAACE;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACNpB,OAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd,CAAE,CAAC;AACP;AAAChB,EAAA,CAjDQH,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAoDrB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}